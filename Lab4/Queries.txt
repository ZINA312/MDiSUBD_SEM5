Пул SQL запросов для сложной выборки из БД
    -Запросы с несколькими условиями
        --Получение пользователей, зарегистрированных после определенной даты и с определенной ролью:
            SELECT * FROM users
            WHERE role_id = (SELECT id FROM roles WHERE name = 'Customer')
            AND email LIKE '%@gmail.com';
        --Поиск продуктов, цена которых выше определенной суммы и принадлежат к определенной категории:
            SELECT *
            FROM products
            WHERE price > 100.00
            AND category IN (SELECT id FROM categories WHERE name = 'Телескопы');
    -Запросы с вложенными конструкциями
        -- Получение названий категорий, в которых есть продукты с ценой больше 50
            SELECT name FROM categories
            WHERE id IN (SELECT category FROM products WHERE price > 50);
        -- Получение имен пользователей, которые сделали заказы со статусом 'Выполнен'
            SELECT name FROM users
            WHERE id IN (SELECT user_id FROM orders WHERE status = 'Выполнен');

Пул SQL запросов для получения представлений в БД:
    -INNER JOIN
        -- Получение названий продуктов и их категорий
            SELECT products.name, categories.name AS category
            FROM products
            INNER JOIN categories ON products.category = categories.id;
    -LEFT JOIN
        -- Получение имен пользователей и количества их заказов, включая пользователей без заказов
            SELECT users.name, COUNT(orders.id) AS order_count
            FROM users
            LEFT JOIN orders ON users.id = orders.user_id
            GROUP BY users.name;
    -RIGHT JOIN
        -- Получение способов доставки и количества заказов по каждому способу
            SELECT delivery_methods.name, COUNT(orders.id) AS order_count
            FROM delivery_methods
            RIGHT JOIN orders ON delivery_methods.id = orders.delivery_method
            GROUP BY delivery_methods.name;
    -FULL OUTER JOIN
        -- Получение имен пользователей и общей суммы их корзин, включая пользователей без корзин
            SELECT users.name, carts.total_price
            FROM users
            FULL OUTER JOIN carts ON users.id = carts.user_id;
    -CROSS JOIN
        -- Получение всех возможных комбинаций пользователей и способов оплаты
            SELECT users.name AS user_name, payment_methods.name AS payment_method
            FROM users
            CROSS JOIN payment_methods;

Пул SQL запросов для получения сгруппированных данных:   
    -GROUP BY с агрегирующими функциями
        -- Получение среднего значения заказов по способам доставки
            SELECT delivery_method, AVG(total_price) AS average_order_value
            FROM orders
            GROUP BY delivery_method;
        -- Получение количества заказов для каждого пользователя, отсортированных по убыванию
            SELECT user_id, COUNT(*) AS total_orders
            FROM orders
            GROUP BY user_id
            ORDER BY total_orders DESC;
    -PARTITION и оконные функции
        -- Получение рангов заказов пользователей по их сумме
            SELECT user_id, total_price,
                RANK() OVER (PARTITION BY user_id ORDER BY total_price DESC) AS price_rank
            FROM orders;
        -- Получение накопленной суммы заказов для каждого пользователя по датам
            SELECT user_id, date, total_price,
                SUM(total_price) OVER (PARTITION BY user_id ORDER BY date) AS cumulative_spent
            FROM orders;
    -HAVING
        -- Получение категорий продуктов с количеством продуктов менее 50
            SELECT category, COUNT(*) AS product_count
            FROM products
            GROUP BY category
            HAVING AVG(price) < 50;
        -- Получение пользователей, потративших более 500
            SELECT user_id, SUM(total_price) AS total_spent
            FROM orders
            GROUP BY user_id
            HAVING SUM(total_price) > 500;
    -UNION
        -- Объединение названий способов оплаты и доставки
            SELECT name FROM payment_methods
            UNION
            SELECT name FROM delivery_methods;

Пул SQL запросов для сложных операций с данными:
    -EXISTS
        -- Получение названий способов оплаты, для которых есть заказы
            SELECT name 
            FROM payment_methods 
            WHERE EXISTS (SELECT 1 FROM orders WHERE payment_method = payment_methods.id);
        -- Получение названий категорий, в которых есть продукты
            SELECT name 
            FROM categories 
            WHERE EXISTS (SELECT 1 FROM products WHERE category = categories.id);
    -INSERT INTO SELECT
        -- Вставка нового пользователя с ролью 'Customer', если его еще нет
            INSERT INTO users (name, email, password, role_id)
            SELECT 'New User', 'newuser@example.com', 'password123', (SELECT id FROM roles WHERE name = 'Customer')
            WHERE NOT EXISTS (SELECT 1 FROM users WHERE email = 'newuser@example.com');
    -CASE
        -- Классификация заказов по сумме
            SELECT name,
                CASE 
                    WHEN total_price > 100 THEN 'High'
                    WHEN total_price BETWEEN 50 AND 100 THEN 'Medium'
                    ELSE 'Low'
                END AS price_category
            FROM orders INNER JOIN users ON orders.user_id = users.id;
        -- Определение типа пользователя по его роли
            SELECT name,
                CASE 
                    WHEN role_id = (SELECT id FROM roles WHERE name = 'admin') THEN 'Administrator'
                    ELSE 'User'
                END AS user_type
            FROM users;
    -EXPLAIN
        -- Анализ запроса для получения всех заказов пользователя с id = 1 и статусом 'Рассматривается'
            EXPLAIN SELECT * FROM orders WHERE user_id = 1 AND status = 'Рассматривается';
        -- Анализ запроса для подсчета продуктов в категории 'Books'
            EXPLAIN ANALYZE SELECT COUNT(*) FROM products WHERE category = (SELECT id FROM categories WHERE name = 'Books');

ТАСКА: для каждого пользователя, который оставил отзыв, вывести сумму стоимости его заказов